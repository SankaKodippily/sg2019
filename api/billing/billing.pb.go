// Code generated by protoc-gen-go. DO NOT EDIT.
// source: billing.proto

package billing

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Invoice struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ammount              float64  `protobuf:"fixed64,3,opt,name=ammount,proto3" json:"ammount,omitempty"`
	Paid                 bool     `protobuf:"varint,4,opt,name=paid,proto3" json:"paid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_958db8ba491a6b57, []int{1}
}

func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Invoice.Unmarshal(m, b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return xxx_messageInfo_Invoice.Size(m)
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Invoice) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Invoice) GetAmmount() float64 {
	if m != nil {
		return m.Ammount
	}
	return 0
}

func (m *Invoice) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func init() {
	proto.RegisterType((*Empty)(nil), "billing.Empty")
	proto.RegisterType((*Invoice)(nil), "billing.Invoice")
}

func init() { proto.RegisterFile("billing.proto", fileDescriptor_958db8ba491a6b57) }

var fileDescriptor_958db8ba491a6b57 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xca, 0xcc, 0xc9,
	0xc9, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xd8, 0xb9,
	0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0xa2, 0xb9, 0xd8, 0x3d, 0xf3, 0xca, 0xf2, 0x33, 0x93,
	0x53, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x98, 0x32,
	0x53, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x38, 0x83,
	0xc0, 0x6c, 0x21, 0x09, 0x2e, 0xf6, 0xc4, 0xdc, 0xdc, 0xfc, 0xd2, 0xbc, 0x12, 0x09, 0x66, 0x05,
	0x46, 0x0d, 0xc6, 0x20, 0x18, 0x17, 0xa4, 0xba, 0x20, 0x31, 0x33, 0x45, 0x82, 0x45, 0x81, 0x51,
	0x83, 0x23, 0x08, 0xcc, 0x36, 0x72, 0xe0, 0x62, 0x77, 0x82, 0x58, 0x28, 0x64, 0xca, 0xc5, 0xef,
	0x9b, 0x58, 0x94, 0x0d, 0xb5, 0x2b, 0x20, 0x31, 0x33, 0x45, 0x48, 0x40, 0x0f, 0xe6, 0x38, 0xa8,
	0xa8, 0x14, 0x86, 0x48, 0x12, 0x1b, 0xd8, 0xdd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4e,
	0x44, 0xd4, 0xea, 0xc8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BillingClient is the client API for Billing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BillingClient interface {
	MarkInvoicePaid(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
}

type billingClient struct {
	cc *grpc.ClientConn
}

func NewBillingClient(cc *grpc.ClientConn) BillingClient {
	return &billingClient{cc}
}

func (c *billingClient) MarkInvoicePaid(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, "/billing.Billing/MarkInvoicePaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingServer is the server API for Billing service.
type BillingServer interface {
	MarkInvoicePaid(context.Context, *Invoice) (*Invoice, error)
}

// UnimplementedBillingServer can be embedded to have forward compatible implementations.
type UnimplementedBillingServer struct {
}

func (*UnimplementedBillingServer) MarkInvoicePaid(ctx context.Context, req *Invoice) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInvoicePaid not implemented")
}

func RegisterBillingServer(s *grpc.Server, srv BillingServer) {
	s.RegisterService(&_Billing_serviceDesc, srv)
}

func _Billing_MarkInvoicePaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingServer).MarkInvoicePaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/billing.Billing/MarkInvoicePaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingServer).MarkInvoicePaid(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Billing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "billing.Billing",
	HandlerType: (*BillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarkInvoicePaid",
			Handler:    _Billing_MarkInvoicePaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "billing.proto",
}
